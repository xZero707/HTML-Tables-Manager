<?PHP

/* Tables Manager v1.0.4.22 by xZero | This version in not backward compatible with older versions.
  ~ Made for easier manipulation with messy html tables
 * 
  Usage:
  $table->create("table_name", "class", "border='3'");   // It will create HTML table with name table_name and class as identifier. Also border is set to 3 <- in that parameter you can add any table additional code.
  $table->header("Foo | Bar", "|");                      // create table headers Foo and Bar
  $table->row("column #1 |column #2| column #3", "|");   // Create table rows, there is no limit
  $table->close();                                       // Close table

  Optional:
  $table->setGlobalDelimiter("This delimiter will be applied globaly"); // Delimiter applied in function call will not be ignored
  %table->setOutput("direct" or "return"); // Default: direct (output using echo). $container[int]
 */

class tablesman {

    public $GlobalDelimiter = false;
    public $generator = "\n-- Generated by Tables Manager\n-- Version: 1.0.4.22\n-- Author: xZero\n-- https://www.elite7hackers.net/\n";
    public $outputTyp = "direct";
    protected $linesArr = [];
    public $output = [];

    function __construct() {
        $this->setGeneratedBy($this->generator);
    }

    public function setGlobalDelimiter($val) {
        $this->GlobalDelimiter = $val;
    }

    public function clean_output() {
        $this->output = array();
    }

    public function setGeneratedBy($val) {
        if ($val) {
            $this->generator = "<!-- {$val} -->\n";
        } else {
            $this->generator = '';
        }
    }

    public function setOutput($val) {
        $this->outputTyp = $val;
    }

    public function create($tablename, $identifier = 'class', $code = NULL) {
        $this->FlushOutput("\n{$this->generator}<table {$identifier}='{$tablename}' {$code}>\n");
    }

    public function header($input, $dlm = '*', $code = NULL) {
        if ($this->GlobalDelimiter) {
            $dlm = $this->GlobalDelimiter;
        }
        $hdrs = \explode($dlm, $input);
        $this->linesArr[] = "<tr$code>";
        foreach ($hdrs as $header) {
            $this->linesArr[] = "<th>$header</th>";
        }
        $this->linesArr[] = "</tr>";
        $this->FlushOutput(implode("\n", $this->linesArr));
    }

    public function row($input, $dlm = '*', $code = NULL) {
        if ($this->GlobalDelimiter) {
            $dlm = $this->GlobalDelimiter;
        }
        /* @var $columns type */
        $columns = \explode($dlm, $input);
        $this->linesArr[] = " <tr$code>";
        foreach ($columns as $column) {
            $this->linesArr[] = "<td>$column</td>";
        }
        $this->linesArr[] = "</tr>";
        $this->FlushOutput(implode("\n", $this->linesArr));
    }

    public function footer($input, $dlm = '*', $code = NULL) {
        if ($this->GlobalDelimiter) {
            $dlm = $this->GlobalDelimiter;
        }

        /* @var $input type */
        $tfoot = \explode($dlm, $input);
        $this->linesArr[] = "<tfoot>\n<tr $code>";
        /* @var $tfoot type */
        foreach ($tfoot as $column) {
            $this->linesArr[] = "<td>$column</td>";
        }
        $this->linesArr[] = "</tr>\n</tfoot>";
        $this->FlushOutput(implode("\n", $this->linesArr));
    }

    public function close() {
        $this->FlushOutput("</table>\n{$this->generator}\n");
    }

    private function FlushOutput($out) {
        $this->linesArr = array(); // Clean array
        switch ($this->outputTyp) {
            case "direct":
                echo $out;
                break;

            case "variable":
                $this->output[] = $out;
                break;

            default:
                echo $out;
                break;
        }
    }

}

if (defined("TBM_INIT")) {
    ${TBM_INIT} = new tablesman; // Create instance tablesman
}